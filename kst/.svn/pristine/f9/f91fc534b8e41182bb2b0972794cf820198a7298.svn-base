<!DOCTYPE html>
<html>
<head>
    <title>模型管理</title>
    <!-- Bootstrap 3.3.7 -->
    <link rel="stylesheet" href="${base}/static/bootstrap/css/bootstrap.min.css">
    <!-- Bootstrap table -->
    <link rel="stylesheet" href="${base}/static/plugins/bootstrap-table/css/bootstrap-table.css">
    <!-- toastr信息提示框插件 -->
    <link rel="stylesheet" href="${base}/static/plugins/toastr/css/toastr.css">
</head>
<body>
<div class="panel-body" style="padding-bottom:0px;">
    <div id="toolbar" class="btn-group">
        <button  type="button" class="btn  btn-info" onclick="dt_insert()">
            <i class="fa fa-plus-square" aria-hidden="true"></i>添加
        </button>
        <button type="button" class="btn  btn-danger" onclick="batchRemove()">
            <i class="fa fa-trash" aria-hidden="true"></i>删除
        </button>
    </div>
    <table id="exampleTable" ></table>
    <input id="handle" name="handle" value="" hidden="hidden">
</div>
<!-- jQuery 3.3.1 -->
<script src="${base}/static/plugins/jQuery/jquery-3.3.1.min.js"></script>
<!-- Bootstrap 3.3.7 -->
<script src="${base}/static/bootstrap/js/bootstrap.js"></script>
<!-- Bootstrap table -->
<script src="${base}/static/plugins/bootstrap-table/js/bootstrap-table.js"></script>
<script src="${base}/static/plugins/bootstrap-table/locale/bootstrap-table-zh-CN.js"></script>
<!-- toastr 信息提示框插件 -->
<script src="${base}/static/plugins/toastr/js/toastr.js"></script>
<script src="${base}/static/plugins/layer/layer.js"></script>
<script type="text/javascript">
    $(function () {
        //初始化 toastr 弹窗位置
        toastr.options.positionClass = 'toast-center-center';
        //初始化Table
        initBootstrapTable();
    });

    //初始化Table
    function initBootstrapTable() {
        $('#exampleTable').bootstrapTable({
            url: '${base}/model/list',         //请求后台的URL（*）
            method: 'post',                      //请求方式（*）
            toolbar: '#toolbar',                //工具按钮用哪个容器
            striped: true,                      //是否显示行间隔色
            dataType: "json", // 服务器返回的数据类型
            cache: false,                       //是否使用缓存，默认为true，所以一般情况下需要设置一下这个属性（*）
            pagination: true,                   //是否显示分页（*）
            sortable: true,                     //是否启用排序
            sortOrder: "asc",                   //排序方式
            //contentType:'application/x-www-form-urlencoded; charset=UTF-8',
            queryParams: function (params) {
                var searchParams = {};
                $("#searchForm ._search").each(function () {
                    if ("" != $(this).val()) {
                        searchParams[$(this).attr('name')] = $(this).val();
                    }
                });
                debugger;
                console.log(searchParams);
                var sorts = {};
                sorts.createDate = "desc";
                var temp = {   //这里的键的名字和控制器的变量名必须一直，这边改动，控制器也需要改成一样的
                    "pageSize" : params.pageSize,
                    "pageNumber" : params.pageNumber,
                    "searchParams": searchParams,
                    "sorts": sorts
                };
                return temp;
            },//传递参数（*）
            //queryParamsType: "limit", //参数格式,发送标准的RESTFul类型的参数请求
            queryParamsType : "",               //查询参数类型，默认是'limit'，注意：如果想获取页面偏移量offset和页面大小pageSize，参数queryParamsType可不配
            sidePagination: "server",           //分页方式：client客户端分页，server服务端分页（*）
            pageNumber:1,                       //初始化加载第一页，默认第一页
            pageSize: 10,                       //每页的记录行数（*）
            pageList: [10, 25, 50, 100],        //可供选择的每页的行数（*）
            search: false,                       //是否显示表格搜索，此搜索是客户端搜索，不会进服务端，所以，个人感觉意义不大
            strictSearch: true,
            showColumns: true,                  //是否显示所有的列
            showRefresh: true,                  //是否显示刷新按钮
            minimumCountColumns: 2,             //最少允许的列数
            clickToSelect: true,                //是否启用点击选中行
            //height: 600,                        //行高，如果没有设置height属性，表格自动根据记录条数觉得表格高度
            //showToggle:true,                    //是否显示详细视图和列表视图的切换按钮
            cardView: false,                    //是否显示详细视图
            detailView: false,                   //是否显示父子表
            columns: [{
                checkbox: true
            }, {
                field: 'category',
                title: '流程分类'
            }, {
                field: 'id',
                title: '模型ID'
            }, {
                field: 'key',
                title: '模型标识'
            }, {
                field: 'name',
                title: '模型名称'
            }, {
                field: 'revision',
                title: '版本号'
            }, {
                field: 'createTime',
                title: '创建时间',
                align: 'center'，
                formatter: function (value, row, index) {
                    var date = row.createTime;
                    return formatDate(new Date(date));
                }
            }, {
                field: 'lastUpdateTime',
                title: '最后更新时间',
                align: 'center'，
                formatter: function (value, row, index) {
                    var date = row.lastUpdateTime;
                    return formatDate(new Date(date));
                }
            }, {
                title: '操作',
                field: 'id',
                align: 'center'
                /*formatter: function (value, row, index) {
                    return dt_delete_button(row)+dt_edit_model_button(row)+dt_doploy_button(row);
                }*/
            }
            ]
        });
    };

    /**
     * 打开新增框
     */
    function dt_insert() {
        $("#handle").attr("value",0);
        // iframe层
        layer.open({
            type: 2,
            title: '添加流程模型',
            maxmin: true,
            shadeClose: false, // 点击遮罩关闭层
            area: ['80%', '520px'],
            //area: ['80%', '80%'],
            content: '${base}/model/insert',
            btn: ['确定', '取消'],
            yes: function (index, layero) {
                debugger;
                // 获取弹出层中的form表单元素
                var formSubmit=layer.getChildFrame('form', index);
                // 获取表单中的提交按钮
                var submited = formSubmit.find('#btnConfirm');
                // 触发点击事件，会对表单进行验证，验证成功则提交表单，失败则返回错误信息
                submited.click();
                //layer.close(index);//这块是点击确定关闭这个弹出层
            },
            end: function(){
                var handle = $("#handle").val();
                if( handle == 1){
                    toastr.success('用户添加成功!');
                }
            }
        });
    }

    /**
     * 打开编辑框
     * @param id
     */
    function dt_update(id) {
        $("#handle").attr("value",0);
        // iframe层
        layer.open({
            type: 2,
            title: '编辑用户',
            maxmin: true,
            shadeClose: false, // 点击遮罩关闭层
            area: ['80%', '80%'],
            //area: '80%',
            content: '${base}/sys/user/edit/'+id,
            btn: ['确定', '取消'],
            yes: function (index, layero) {
                debugger;
                // 获取弹出层中的form表单元素
                var formSubmit=layer.getChildFrame('form', index);
                // 获取表单中的提交按钮
                var submited = formSubmit.find('#btnConfirm');
                // 触发点击事件，会对表单进行验证，验证成功则提交表单，失败则返回错误信息
                submited.click();
                //layer.close(index);//这块是点击确定关闭这个弹出层
            },
            end: function(){
                var handle = $("#handle").val();
                if( handle == 2){
                    toastr.success('用户编辑成功!');
                }
            }
        });
    }

    /**
     * 删除某条记录
     * @param url
     * @param id
     */
    function dt_remove(id) {
        layer.confirm('确定要删除选中的记录？', {icon: 3, title:'提示'}, function (index) {
            $.ajax({
                url: '${base}/sys/user/delete',
                type: "POST",
                data: {
                    'id': id
                },
                success: function (result) {
                    if(result.success){
                        $('button[name="refresh"]').click();
                        toastr.success('删除成功!');
                        layer.close(index);
                    }else{
                        toastr.error(result.message);
                        layer.close(index);
                    }
                }
            });
        })
    }

    /**
     * 批量删除
     */
    function batchRemove() {
        var rows = $('#userTable').bootstrapTable('getSelections'); // 返回所有选择的行，当没有选择的记录时，返回一个空数组
        if (rows.length == 0) {
            toastr.warning("请选择要删除的数据!");
            return;
        }
        //var ids = '';
        //遍历所有选择的行数据，取每条数据对应的ID
        /*$.each(rows, function (i, row) {
            if(row['id'] === 1){
                layer.msg("不能删除超级管理员");
                return false;
            }
        });*/

        layer.confirm("确认要删除选中的数据吗?", {icon: 3, title:'提示'}, function (index) {
            var deleteindex = layer.msg('删除中，请稍候...',{icon: 16,time:false,shade:0.8});
            $.ajax({
                url: '${base}/sys/user/deleteSome',
                type: "POST",
                dataType:"json",
                contentType:"application/json",
                data: JSON.stringify(rows),
                success: function (result) {
                    layer.close(deleteindex);
                    if(result.success){
                        $('button[name="refresh"]').click();
                        toastr.success('删除成功!');
                        layer.close(index);
                    }else{
                        console.log(result.message);
                        toastr.error(result.message);
                        layer.close(index);
                    }
                }
            });
        })
    }

    function dt_delete_button(row) {
        var deleteO = '<a class="btn btn-warning btn-sm" href="#" title="删除"  mce_href="#" ' +
            'onclick="remove(\'' + row.id + '\')"><i class="fa fa-remove"></i></a> ';

        return deleteO;

    }

    function dt_edit_model_button(row) {
        var uri = url.substring(0, url.length - 1);
        var editO = '<a class="btn btn-primary btn-sm" href="' +'modeler.html?modelId=' + row.id + '" title="编辑"><i class="fa fa-edit"></i></a> ';
        return editO;
    }

    function dt_doploy_button(row) {
        var editO = '<a class="btn btn-primary btn-sm" href="#" mce_href="#" title="部署" onclick="deploy(\''
                + row.id + '\')"><i class="fa fa-cog"></i></a> ';
        return editO;
    }

    function deploy(id) {
        layer.confirm('确定要部署选中的记录？', {
            btn: ['确定', '取消']
        }, function () {
            $.ajax({
                url: url + "deploy",
                type: "POST",
                data: {
                    'id': id
                },
                success: function (r) {
                    dataTable_rep_message(r)
                }
            });
        })
    }

    /**
     * 格式化日期
     * @param now
     * @returns {string}
     */
    function formatDate(now) {
        var year = now.getFullYear();
        var month = now.getMonth()+1;
        var date = now.getDate();
        var hour = now.getHours();
        var minute = now.getMinutes();
        var second = now.getSeconds() > 10 ? now.getSeconds() : '0' + now.getSeconds();
        return year + "-" + month + "-" + date+ " " + hour + ":" + minute + ":" + second;
    }
</script>
</body>
</html>